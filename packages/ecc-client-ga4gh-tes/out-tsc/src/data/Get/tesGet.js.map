{"version":3,"file":"tesGet.js","sourceRoot":"","sources":["../../../../src/data/Get/tesGet.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C;;;;;;;;;;GAUG;AACH,MAAM,UAAU,GAAG,KAAK,EACtB,QAAQ,GAAG,CAAC,EACZ,aAAa,GAAG,EAAE,EAClB,IAAI,GAAG,SAAS,EAChB,UAAU,GAAG,EAAE,EACf,EAAE;IACF,IAAI,GAAG,GAAG,GAAG,WAAW,GAAG,CAAC;IAE5B,wCAAwC;IACxC,IAAI,QAAQ,EAAE;QACZ,GAAG,IAAI,aAAa,QAAQ,GAAG,CAAC;KACjC;IAED,oCAAoC;IACpC,IAAI,IAAI,EAAE;QACR,GAAG,IAAI,QAAQ,IAAI,GAAG,CAAC;KACxB;IAED,6CAA6C;IAC7C,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,GAAG,IAAI,cAAc,aAAa,GAAG,CAAC;KACvC;IAED,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,GAAG,IAAI,eAAe,UAAU,GAAG,CAAC;KACrC;IAED,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;SAC3D;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;KACpC;AACH,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,SAAS,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IACrC,MAAM,GAAG,GAAG,GAAG,WAAW,IAAI,EAAE,YAAY,CAAC;IAE7C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;SAC3D;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;KACpC;AACH,CAAC,CAAC;AAEF,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import { getTasksURL } from \"../baseURL.js\";\n\n/**\n * Fetches tasks based on the specified parameters.\n *\n * @param {number} [pageSize] - OPTIONAL. Number of tasks to return in one page. Must be less than 2048. Defaults to 256.\n * @param {string} [nextPageToken] - OPTIONAL. Page token used to retrieve the next page of results. If unspecified, returns the first page of results.\n * @param {string} [view] - OPTIONAL. Affects the fields included in the returned Task messages. See TaskView below.\n *                           - 'MINIMAL': Task message will include ONLY the fields: Task.Id, Task.State.\n *                           - 'BASIC': Task message will include all fields EXCEPT: Task.ExecutorLog.stdout, Task.ExecutorLog.stderr, Input.content, TaskLog.system_logs.\n *                           - 'FULL': Task message includes all fields.\n * @param {string} [namePrefix] - OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done.\n */\nconst fetchTasks = async (\n  pageSize = 5,\n  nextPageToken = \"\",\n  view = \"MINIMAL\",\n  namePrefix = \"\"\n) => {\n  let url = `${getTasksURL}?`;\n\n  // Append pageSize parameter if provided\n  if (pageSize) {\n    url += `page_size=${pageSize}&`;\n  }\n\n  // Append view parameter if provided\n  if (view) {\n    url += `view=${view}&`;\n  }\n\n  // Append nextPageToken parameter if provided\n  if (nextPageToken.length > 0) {\n    url += `page_token=${nextPageToken}&`;\n  }\n\n  if (namePrefix.length > 0) {\n    url += `name_prefix=${namePrefix}&`;\n  }\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error: ${error}`);\n  }\n};\n\n/**\n *\n * @param {string} [id] - ID of the specific task\n */\nconst fetchTask = async (id: string) => {\n  const url = `${getTasksURL}/${id}?view=FULL`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error: ${error}`);\n  }\n};\n\nexport { fetchTasks, fetchTask };\n"]}