{"version":3,"file":"tesGetRun.js","sourceRoot":"","sources":["../../../../../src/components/tes-get-run/definition/tesGetRun.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,WAAW,EACX,IAAI,EACJ,aAAa,EACb,UAAU,GACX,MAAM,yBAAyB,CAAC;AACjC,OAAO,QAAQ,MAAM,yBAAyB,CAAC;AAC/C,OAAO,MAAM,MAAM,uBAAuB,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAuC5C,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,WAAW;IAAnC;;QACP,OAAE,GAAG,EAAE,CAAC;QAER,UAAK,GAAG,EAAE,CAAC;QAEL,cAAS,GAAG,IAAI,CAAC;QAEjB,SAAI,GAAa;YAC3B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,EAAE;YACR,WAAW,EAAE,EAAE;YACf,aAAa,EAAE,EAAE;YACjB,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,EAAE;SACT,CAAC;QAsBF,gCAAgC;QAChC,iBAAY,GAAG,KAAK,IAAI,EAAE;YACxB,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC,CAAC;QAEF,gCAAgC;QAChC,gBAAW,GAAG,KAAK,IAAI,EAAE;YACvB,6CAA6C;YAC7C,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,IAAI,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACxB;QACH,CAAC,CAAC;IACJ,CAAC;IAjCC,iBAAiB;;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,oDAAoD;QACpD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,aAAa,CAAC,aAAa,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,EAAE;YAChC,0DAA0D;YAC1D,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACnE;IACH,CAAC;IAED,oBAAoB;;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,aAAa,CAAC,aAAa,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,EAAE;YAChC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACnE;IACH,CAAC;CAeF,CAAA;AAjDO;IAAL,IAAI;qCAAS;AAER;IAAL,IAAI;wCAAY;AAEL;IAAX,UAAU;4CAAkB;AAEjB;IAAX,UAAU;uCAQT;AAfiB,SAAS;IAN7B,aAAa,CAAC;QACb,IAAI,EAAE,iBAAiB;QACvB,QAAQ;QACR,MAAM;QACN,aAAa,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;KAChC,CAAC;GACmB,SAAS,CAkD7B;eAlDoB,SAAS","sourcesContent":["import {\n  FASTElement,\n  attr,\n  customElement,\n  observable,\n} from \"@microsoft/fast-element\";\nimport template from \"./tesGetRun.template.js\";\nimport styles from \"./tesGetRun.styles.js\";\nimport { fetchTask } from \"../../../data/index.js\";\nimport { deleteTask } from \"../../../data/Post/tesPost.js\";\n\ninterface TaskData {\n  id: string;\n  state: string;\n  name: string;\n  description: string;\n  executors: Executor[];\n  logs: Log[];\n  creation_time: string;\n}\n\ninterface Executor {\n  image: string;\n  command: string[];\n}\n\ninterface Log {\n  logs: LogEntry[];\n  metadata: {\n    USER_ID: string;\n  };\n  start_time: string;\n  end_time: string;\n}\n\ninterface LogEntry {\n  start_time: string;\n  end_time: string;\n  stdout: string;\n  exit_code: number;\n}\n\n@customElement({\n  name: \"ecc-tes-get-run\",\n  template,\n  styles,\n  shadowOptions: { mode: \"open\" },\n})\nexport default class TESGetRun extends FASTElement {\n  @attr id = \"\";\n\n  @attr state = \"\";\n\n  @observable isLoading = true;\n\n  @observable data: TaskData = {\n    id: this.id,\n    state: this.state,\n    name: \"\",\n    description: \"\",\n    creation_time: \"\",\n    executors: [],\n    logs: [],\n  };\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Add event listener to handle accordion open event\n    this.addEventListener(\"change\", this.handleFetch);\n    const delButton = this.shadowRoot?.querySelector(\"fast-button\");\n    if (!this.isLoading && delButton) {\n      // delButton.addEventListener(\"click\", this.handleDelete);\n      delButton.addEventListener(\"click\", this.handleDelete.bind(this));\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"change\", this.handleFetch);\n    const delButton = this.shadowRoot?.querySelector(\"fast-button\");\n    if (!this.isLoading && delButton) {\n      delButton.addEventListener(\"click\", this.handleDelete.bind(this));\n    }\n  }\n\n  // Handles deletion of this task\n  handleDelete = async () => {\n    await deleteTask(this.id);\n  };\n\n  // Fetched the task with this ID\n  handleFetch = async () => {\n    // Only fetch the data if not already fetched\n    if (this.isLoading) {\n      this.data = await fetchTask(this.id);\n      this.isLoading = false;\n    }\n  };\n}\n"]}