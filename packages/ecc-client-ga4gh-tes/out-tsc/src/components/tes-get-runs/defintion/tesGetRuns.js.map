{"version":3,"file":"tesGetRuns.js","sourceRoot":"","sources":["../../../../../src/components/tes-get-runs/defintion/tesGetRuns.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FASTElement,\n  attr,\n  customElement,\n  observable,\n} from \"@microsoft/fast-element\";\nimport { fetchTasks } from \"../../../data/index.js\";\nimport template from \"./tesGetRuns.template.js\";\nimport styles from \"./tesGetRuns.styles.js\";\n\ninterface Task {\n  id: string;\n  state: string;\n}\n@customElement({\n  name: \"ecc-tes-get-runs\",\n  template,\n  styles,\n})\nexport default class TESGetRuns extends FASTElement {\n  // Number of Task to be listed at once\n  @attr pageSize = 5;\n\n  @observable nextPageToken: string | null = null;\n\n  // Data to be rendered\n  @observable data: Task[] = [];\n\n  // Data cache for at max 3 times the pageSize\n  @observable cachedData: Task[] = [];\n\n  // First page number of every data cache\n  @observable firstPageNumber = 1;\n\n  // Number of pageSize data present in the cache\n  @observable pageNumberOffset = 0;\n\n  @observable pageNumberArray: number[] = [];\n\n  // Seach input for name_prefix filter\n  @observable searchInput = \"\";\n\n  @observable stateInput = \"ALL\";\n\n  @observable unfilterdData: Task[] = [];\n\n  @observable isLoading = true;\n\n  async connectedCallback() {\n    super.connectedCallback();\n    // Since this is the first call, fetch the first page, no token needed\n    await this.fetchData(\"\");\n  }\n\n  /**\n   *Fetches data of 3*pageSize length and sets it as cache\n   * @param token token for the next page for cache data\n   */\n  fetchData = async (token: string, namePrefix: string | null = null) => {\n    this.isLoading = true;\n\n    // Reset data\n    this.data = [];\n\n    // Next first page number would start after offset of this data\n    if (token !== \"\") this.firstPageNumber += this.pageNumberOffset;\n\n    // Fetch new data\n    let newData = [];\n    if (!namePrefix) newData = await fetchTasks(this.pageSize * 3, token);\n    else\n      newData = await fetchTasks(\n        this.pageSize * 3,\n        token,\n        \"MINIMAL\",\n        namePrefix\n      );\n    if (newData && newData.tasks) {\n      this.cachedData = newData.tasks;\n      this.data = this.cachedData.slice(0, this.pageSize);\n      this.unfilterdData = this.data;\n      this.nextPageToken = newData.next_page_token;\n      this.pageNumberOffset = Math.ceil(this.cachedData.length / this.pageSize);\n      const array = [];\n      for (let i = 0; i < this.pageNumberOffset; i += 1) {\n        array.push(i + this.firstPageNumber);\n      }\n      this.pageNumberArray = array;\n    }\n    this.isLoading = false;\n  };\n\n  // Cache new data\n  handleNext = async () => {\n    if (this.searchInput !== \"\") {\n      await this.fetchData(this.nextPageToken as string, this.searchInput);\n    } else await this.fetchData(this.nextPageToken as string, this.searchInput);\n  };\n\n  /**\n   *This method is fired when user, click to change pages within cache\n   * @param pageNumber Page number of pagination\n   */\n  handleClick = (pageNumber: number): void => {\n    const idx: number = pageNumber - this.firstPageNumber;\n\n    const startIndex: number = idx * this.pageSize;\n    const endIndex: number = (idx + 1) * this.pageSize;\n\n    this.data = this.cachedData.slice(startIndex, endIndex);\n\n    // Set unfiltered data for state filterinng\n    this.unfilterdData = this.data;\n\n    // Reset state filter\n    this.stateInput = \"ALL\";\n  };\n\n  handleNameInput(event: Event) {\n    this.searchInput = (event.target as HTMLInputElement).value;\n\n    // reset the pages\n    this.firstPageNumber = 1;\n    this.pageNumberOffset = 0;\n\n    // Fetch new data\n    this.fetchData(\"\", this.searchInput);\n  }\n\n  handleStateInput(event: Event) {\n    this.stateInput = (event.target as HTMLInputElement).value;\n\n    // Filter data on current page based on the filter input\n    if (this.stateInput === \"ALL\") this.data = this.unfilterdData;\n    else\n      this.data = this.unfilterdData.filter(\n        (task) => task.state === this.stateInput\n      );\n  }\n}\n"]}