{"version":3,"file":"wesGet.js","sourceRoot":"","sources":["../../../../src/data/Workflow/wesGet.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,MAAM,cAAc,GAAG,KAAK,EAC1B,OAAe,EACf,QAAQ,GAAG,CAAC,EACZ,aAAa,GAAG,EAAE,EAClB,EAAE;IACF,IAAI,GAAG,GAAG,GAAG,OAAO,QAAQ,CAAC;IAE7B,wCAAwC;IACxC,IAAI,QAAQ,EAAE;QACZ,GAAG,IAAI,aAAa,QAAQ,GAAG,CAAC;KACjC;IAED,6CAA6C;IAC7C,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,GAAG,IAAI,cAAc,aAAa,GAAG,CAAC;KACvC;IAED,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,gBAAgB;gBAC5B,KAAK,EAAE,yBAAyB;aACjC,CAAC;SACH;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAAC,OAAO,KAAK,EAAE;QACd,OAAO;YACL,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,gBAAgB;YAC5B,KAAK;SACN,CAAC;KACH;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,aAAa,GAAG,KAAK,EAAE,OAAe,EAAE,EAAU,EAAE,EAAE;IAC1D,MAAM,GAAG,GAAG,GAAG,OAAO,SAAS,EAAE,EAAE,CAAC;IAEpC,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,eAAe;gBAC3B,KAAK,EAAE,yBAAyB;aACjC,CAAC;SACH;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9B;IAAC,OAAO,KAAK,EAAE;QACd,OAAO;YACL,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,eAAe;YAC3B,KAAK;SACN,CAAC;KACH;AACH,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,cAAc,GAAG,KAAK,EAAE,OAAe,EAAE,EAAU,EAAE,EAAE;IAC3D,MAAM,GAAG,GAAG,GAAG,OAAO,SAAS,EAAE,SAAS,CAAC;IAC3C,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAChC,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;KACjB;IAAC,OAAO,KAAK,EAAE;QACd,OAAO;YACL,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,gBAAgB;YAC5B,KAAK;SACN,CAAC;KACH;AACH,CAAC,CAAC;AAEF,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC","sourcesContent":["/**\n *Fetches workflows based on the specified parameters.\n * @param baseURL - The base URL for fetching workflows\n * @param pageSize - OPTIONAL The preferred number of workflow runs to return in a page\n * @param nextPageToken - OPTIONAL Token to use to indicate where to start getting results.\n * @returns Promise if fullfilled an array of workflows\n */\nconst fetchWorkflows = async (\n  baseURL: string,\n  pageSize = 5,\n  nextPageToken = ''\n) => {\n  let url = `${baseURL}/runs?`;\n\n  // Append pageSize parameter if provided\n  if (pageSize) {\n    url += `page_size=${pageSize}&`;\n  }\n\n  // Append nextPageToken parameter if provided\n  if (nextPageToken.length > 0) {\n    url += `page_token=${nextPageToken}&`;\n  }\n\n  try {\n    const response = await fetch(url);\n    if (!response) {\n      return {\n        isError: true,\n        breakpoint: 'fetchWorkflows',\n        error: 'No response from server',\n      };\n    }\n    return await response.json();\n  } catch (error) {\n    return {\n      isError: true,\n      breakpoint: 'fetchWorkflows',\n      error,\n    };\n  }\n};\n\n/**\n * Fetches full view of workflow with the specified ID\n * @param {string} [baseURL] - Base URL for fetching workflows\n * @param {string} [id] - ID of the specific workflow\n */\nconst fetchWorkflow = async (baseURL: string, id: string) => {\n  const url = `${baseURL}/runs/${id}`;\n\n  try {\n    const response = await fetch(url);\n    if (!response) {\n      return {\n        isError: true,\n        breakpoint: 'fetchWorkflow',\n        error: 'No response from server',\n      };\n    }\n    return await response.json();\n  } catch (error) {\n    return {\n      isError: true,\n      breakpoint: 'fetchWorkflow',\n      error,\n    };\n  }\n};\n\n/**\n *This mathod cancel a specific workflow\n * @param id ID of the workflow to be deleted\n */\nconst cancelWorkflow = async (baseURL: string, id: string) => {\n  const url = `${baseURL}/runs/${id}/cancel`;\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n    });\n    return response;\n  } catch (error) {\n    return {\n      isError: true,\n      breakpoint: 'cancelWorkflow',\n      error,\n    };\n  }\n};\n\nexport { fetchWorkflows, fetchWorkflow, cancelWorkflow };\n"]}